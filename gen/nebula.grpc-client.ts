// @generated by protobuf-ts 2.9.1 with parameter client_grpc1,long_type_number
// @generated from protobuf file "nebula.proto" (package "nebula.service", syntax proto3)
// tslint:disable
//
//
// Copyright 2017-present varchar.io
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { V1 } from "./nebula";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { PingResponse } from "./nebula";
import type { ServiceInfo } from "./nebula";
import type { UrlData } from "./nebula";
import type { LoadResponse } from "./nebula";
import type { LoadRequest } from "./nebula";
import type { QueryResponse } from "./nebula";
import type { QueryRequest } from "./nebula";
import type { TableStateResponse } from "./nebula";
import type { TableStateRequest } from "./nebula";
import type { TableList } from "./nebula";
import type { ListTables } from "./nebula";
import type { EchoResponse } from "./nebula";
import type { EchoRequest } from "./nebula";
import * as grpc from "@grpc/grpc-js";
/**
 * all service methods are captilized compared to other regular methods
 *
 * @generated from protobuf service nebula.service.V1
 */
export interface IV1Client {
    /**
     * Sends a greeting
     *
     * @generated from protobuf rpc: Echo(nebula.service.EchoRequest) returns (nebula.service.EchoResponse);
     */
    echo(input: EchoRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
    echo(input: EchoRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
    echo(input: EchoRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
    echo(input: EchoRequest, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
    /**
     * Get all available data sources
     *
     * @generated from protobuf rpc: Tables(nebula.service.ListTables) returns (nebula.service.TableList);
     */
    tables(input: ListTables, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: TableList) => void): grpc.ClientUnaryCall;
    tables(input: ListTables, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: TableList) => void): grpc.ClientUnaryCall;
    tables(input: ListTables, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: TableList) => void): grpc.ClientUnaryCall;
    tables(input: ListTables, callback: (err: grpc.ServiceError | null, value?: TableList) => void): grpc.ClientUnaryCall;
    /**
     * Get table state for given table
     *
     * @generated from protobuf rpc: State(nebula.service.TableStateRequest) returns (nebula.service.TableStateResponse);
     */
    state(input: TableStateRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: TableStateResponse) => void): grpc.ClientUnaryCall;
    state(input: TableStateRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: TableStateResponse) => void): grpc.ClientUnaryCall;
    state(input: TableStateRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: TableStateResponse) => void): grpc.ClientUnaryCall;
    state(input: TableStateRequest, callback: (err: grpc.ServiceError | null, value?: TableStateResponse) => void): grpc.ClientUnaryCall;
    /**
     * Query Nebula to get result
     *
     * @generated from protobuf rpc: Query(nebula.service.QueryRequest) returns (nebula.service.QueryResponse);
     */
    query(input: QueryRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: QueryResponse) => void): grpc.ClientUnaryCall;
    query(input: QueryRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: QueryResponse) => void): grpc.ClientUnaryCall;
    query(input: QueryRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: QueryResponse) => void): grpc.ClientUnaryCall;
    query(input: QueryRequest, callback: (err: grpc.ServiceError | null, value?: QueryResponse) => void): grpc.ClientUnaryCall;
    /**
     * on demand loading specified data with parameters
     * template defined in cluster configuration
     *
     * @generated from protobuf rpc: Load(nebula.service.LoadRequest) returns (nebula.service.LoadResponse);
     */
    load(input: LoadRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: LoadResponse) => void): grpc.ClientUnaryCall;
    load(input: LoadRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: LoadResponse) => void): grpc.ClientUnaryCall;
    load(input: LoadRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: LoadResponse) => void): grpc.ClientUnaryCall;
    load(input: LoadRequest, callback: (err: grpc.ServiceError | null, value?: LoadResponse) => void): grpc.ClientUnaryCall;
    /**
     * shut down all work nodes - used for perf profiling
     *
     * @generated from protobuf rpc: Nuclear(nebula.service.EchoRequest) returns (nebula.service.EchoResponse);
     */
    nuclear(input: EchoRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
    nuclear(input: EchoRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
    nuclear(input: EchoRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
    nuclear(input: EchoRequest, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
    /**
     * URL service - code for raw or raw for code
     *
     * @generated from protobuf rpc: Url(nebula.service.UrlData) returns (nebula.service.UrlData);
     */
    url(input: UrlData, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: UrlData) => void): grpc.ClientUnaryCall;
    url(input: UrlData, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: UrlData) => void): grpc.ClientUnaryCall;
    url(input: UrlData, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: UrlData) => void): grpc.ClientUnaryCall;
    url(input: UrlData, callback: (err: grpc.ServiceError | null, value?: UrlData) => void): grpc.ClientUnaryCall;
    /**
     * Discovery service - register node
     *
     * @generated from protobuf rpc: Ping(nebula.service.ServiceInfo) returns (nebula.service.PingResponse);
     */
    ping(input: ServiceInfo, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: PingResponse) => void): grpc.ClientUnaryCall;
    ping(input: ServiceInfo, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: PingResponse) => void): grpc.ClientUnaryCall;
    ping(input: ServiceInfo, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: PingResponse) => void): grpc.ClientUnaryCall;
    ping(input: ServiceInfo, callback: (err: grpc.ServiceError | null, value?: PingResponse) => void): grpc.ClientUnaryCall;
}
/**
 * all service methods are captilized compared to other regular methods
 *
 * @generated from protobuf service nebula.service.V1
 */
export class V1Client extends grpc.Client implements IV1Client {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * Sends a greeting
     *
     * @generated from protobuf rpc: Echo(nebula.service.EchoRequest) returns (nebula.service.EchoResponse);
     */
    echo(input: EchoRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: EchoResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: EchoResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: EchoResponse) => void)): grpc.ClientUnaryCall {
        const method = V1.methods[0];
        return this.makeUnaryRequest<EchoRequest, EchoResponse>(`/${V1.typeName}/${method.name}`, (value: EchoRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): EchoResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * Get all available data sources
     *
     * @generated from protobuf rpc: Tables(nebula.service.ListTables) returns (nebula.service.TableList);
     */
    tables(input: ListTables, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: TableList) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: TableList) => void), callback?: ((err: grpc.ServiceError | null, value?: TableList) => void)): grpc.ClientUnaryCall {
        const method = V1.methods[1];
        return this.makeUnaryRequest<ListTables, TableList>(`/${V1.typeName}/${method.name}`, (value: ListTables): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): TableList => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * Get table state for given table
     *
     * @generated from protobuf rpc: State(nebula.service.TableStateRequest) returns (nebula.service.TableStateResponse);
     */
    state(input: TableStateRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: TableStateResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: TableStateResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: TableStateResponse) => void)): grpc.ClientUnaryCall {
        const method = V1.methods[2];
        return this.makeUnaryRequest<TableStateRequest, TableStateResponse>(`/${V1.typeName}/${method.name}`, (value: TableStateRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): TableStateResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * Query Nebula to get result
     *
     * @generated from protobuf rpc: Query(nebula.service.QueryRequest) returns (nebula.service.QueryResponse);
     */
    query(input: QueryRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: QueryResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: QueryResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: QueryResponse) => void)): grpc.ClientUnaryCall {
        const method = V1.methods[3];
        return this.makeUnaryRequest<QueryRequest, QueryResponse>(`/${V1.typeName}/${method.name}`, (value: QueryRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): QueryResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * on demand loading specified data with parameters
     * template defined in cluster configuration
     *
     * @generated from protobuf rpc: Load(nebula.service.LoadRequest) returns (nebula.service.LoadResponse);
     */
    load(input: LoadRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: LoadResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: LoadResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: LoadResponse) => void)): grpc.ClientUnaryCall {
        const method = V1.methods[4];
        return this.makeUnaryRequest<LoadRequest, LoadResponse>(`/${V1.typeName}/${method.name}`, (value: LoadRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): LoadResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * shut down all work nodes - used for perf profiling
     *
     * @generated from protobuf rpc: Nuclear(nebula.service.EchoRequest) returns (nebula.service.EchoResponse);
     */
    nuclear(input: EchoRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: EchoResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: EchoResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: EchoResponse) => void)): grpc.ClientUnaryCall {
        const method = V1.methods[5];
        return this.makeUnaryRequest<EchoRequest, EchoResponse>(`/${V1.typeName}/${method.name}`, (value: EchoRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): EchoResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * URL service - code for raw or raw for code
     *
     * @generated from protobuf rpc: Url(nebula.service.UrlData) returns (nebula.service.UrlData);
     */
    url(input: UrlData, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: UrlData) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: UrlData) => void), callback?: ((err: grpc.ServiceError | null, value?: UrlData) => void)): grpc.ClientUnaryCall {
        const method = V1.methods[6];
        return this.makeUnaryRequest<UrlData, UrlData>(`/${V1.typeName}/${method.name}`, (value: UrlData): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): UrlData => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * Discovery service - register node
     *
     * @generated from protobuf rpc: Ping(nebula.service.ServiceInfo) returns (nebula.service.PingResponse);
     */
    ping(input: ServiceInfo, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: PingResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: PingResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: PingResponse) => void)): grpc.ClientUnaryCall {
        const method = V1.methods[7];
        return this.makeUnaryRequest<ServiceInfo, PingResponse>(`/${V1.typeName}/${method.name}`, (value: ServiceInfo): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): PingResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
